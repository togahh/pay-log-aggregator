{{- if .Values.deployment.enabled }}
{{- $deployment := .Values.deployment }}
{{- $prometheus := .Values.prometheus }}
{{- $configurations := .Values.global.configurations }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "pay-log-aggregator.fullname" . }}
  labels:
    {{- include "pay-log-aggregator.labels" . | nindent 4 }}
spec:
  {{- if not $deployment.autoscaling.enabled }}
  replicas: {{ $deployment.replicas | default 1 }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "pay-log-aggregator.selectorLabels" . | nindent 6 }}
  {{- with $deployment.deploymentStrategy }}
  strategy:
    type: {{ .type }}
    {{- if eq .type "RollingUpdate" }}
    rollingUpdate:
      maxSurge: {{ required "value 'deployment.deploymentStrategy.maxSurge' is required" .maxSurge }}
      maxUnavailable: {{ required "value 'deployment.deploymentStrategy.maxUnavailable' is required" .maxUnavailable }}
    {{- end }}
  {{- end }}
  template:
    metadata:
      annotations:
        {{- with $deployment.annotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        {{- if $configurations.enabled }}
        "checksum/config": {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        {{- end }}
        {{- if $prometheus.enabled }}
        "prometheus.io/scrape": "true"
        "prometheus.io/port": "{{ $prometheus.port }}"
        "prometheus.io/path": "{{ $prometheus.path }}"
        {{- end }}
      labels:
        {{- include "pay-log-aggregator.selectorLabels" . | nindent 8 }}
    spec:
      serviceAccountName: {{ include "pay-log-aggregator.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.securityContext | nindent 8 }}
      terminationGracePeriodSeconds: {{ $deployment.terminationGracePeriodSeconds | default 45 }}
      
      {{- /* Topology spread constraints for HA */ -}}
      {{- if or $deployment.topologySpreadConstraintsByHostName $deployment.topologySpreadConstraintsByZone }}
      topologySpreadConstraints:
        {{- if $deployment.topologySpreadConstraintsByHostName }}
        - maxSkew: 1
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: ScheduleAnyway
          labelSelector:
            matchLabels:
              {{- include "pay-log-aggregator.selectorLabels" . | nindent 14 }}
        {{- end }}
        {{- if $deployment.topologySpreadConstraintsByZone }}
        - maxSkew: 1
          topologyKey: topology.kubernetes.io/zone
          whenUnsatisfiable: ScheduleAnyway
          labelSelector:
            matchLabels:
              {{- include "pay-log-aggregator.selectorLabels" . | nindent 14 }}
        {{- end }}
      {{- end }}
      
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.containerSecurityContext | nindent 12 }}
          image: {{ include "pay-log-aggregator.image" . }}
          imagePullPolicy: IfNotPresent
          
          {{- if $deployment.containerPort }}
          ports:
            - name: http
              containerPort: {{ $deployment.containerPort }}
              protocol: TCP
            {{- if $deployment.extraContainerPorts }}
            {{- range $deployment.extraContainerPorts }}
            - name: {{ .name }}
              containerPort: {{ .port }}
              protocol: {{ .protocol }}
            {{- end }}
            {{- end }}
          {{- end }}
          
          env:
            {{- include "pay-log-aggregator.containerEnv" . | nindent 12 }}
            {{- include "pay-log-aggregator.containerValueFrom" . | nindent 12 }}
          
          {{- with $deployment.command }}
          command:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with $deployment.args }}
          args:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          
          {{- if $deployment.startupProbe.enabled }}
          startupProbe:
            {{- if $deployment.startupProbe.httpGet }}
            httpGet:
              path: {{ $deployment.startupProbe.httpGet.path }}
              port: http
            {{- end }}
            {{- if $deployment.startupProbe.command }}
            exec:
              command:
                {{- toYaml $deployment.startupProbe.command | nindent 16 }}
            {{- end }}
            initialDelaySeconds: {{ $deployment.startupProbe.initialDelaySeconds | default 5 }}
            periodSeconds: {{ $deployment.startupProbe.periodSeconds | default 10 }}
            timeoutSeconds: {{ $deployment.startupProbe.timeoutSeconds | default 1 }}
            failureThreshold: {{ $deployment.startupProbe.failureThreshold | default 10 }}
          {{- end }}
          
          {{- if $deployment.livenessProbe.enabled }}
          livenessProbe:
            {{- if $deployment.livenessProbe.httpGet }}
            httpGet:
              path: {{ $deployment.livenessProbe.httpGet.path }}
              port: http
            {{- end }}
            {{- if $deployment.livenessProbe.command }}
            exec:
              command:
                {{- toYaml $deployment.livenessProbe.command | nindent 16 }}
            {{- end }}
            timeoutSeconds: {{ $deployment.livenessProbe.timeoutSeconds | default 5 }}
            periodSeconds: {{ $deployment.livenessProbe.periodSeconds | default 10 }}
          {{- end }}
          
          {{- if $deployment.readinessProbe.enabled }}
          readinessProbe:
            {{- if $deployment.readinessProbe.httpGet }}
            httpGet:
              path: {{ $deployment.readinessProbe.httpGet.path }}
              port: http
            {{- end }}
            {{- if $deployment.readinessProbe.command }}
            exec:
              command:
                {{- toYaml $deployment.readinessProbe.command | nindent 16 }}
            {{- end }}
            timeoutSeconds: {{ $deployment.readinessProbe.timeoutSeconds | default 5 }}
            periodSeconds: {{ $deployment.readinessProbe.periodSeconds | default 10 }}
          {{- end }}
          
          {{- if $deployment.preStopHook.enabled }}
          lifecycle:
            preStop:
              exec:
                command:
                  - /bin/sleep
                  - "{{ $deployment.preStopHook.preStopSeconds }}"
          {{- end }}
          
          resources:
            {{- toYaml $deployment.resources | nindent 12 }}
          
          {{- with $deployment.volumeMounts }}
          volumeMounts:
            {{- toYaml . | nindent 12 }}
          {{- end }}
      
      {{- with $deployment.volumes }}
      volumes:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      
      {{- with $deployment.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      
      {{- with $deployment.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      
      {{- with $deployment.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}